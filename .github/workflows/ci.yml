name: "Reusable workflow to run automated tests and the mnist-digit-demo-pipeline"

on:
  workflow_call:

defaults:
  run:
    shell: bash

    # Note that bash commands are executed only after the checkout step.
    #
    # ./docker is equivalent to ${{ github.workspace }}/docker, but latter is not
    # supported in defaults section.
    working-directory: ./docker

jobs:
  run-tests-pipeline-and-persist-pipeline-outputs:
    name: Build pipeline tests, run pipeline and persist pipeline outputs
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: "Determine run-environment"
        run: |
            echo "RUN_ENVIRONMENT=ci" >> $GITHUB_ENV

      - name: "Build all required Docker images"
        run: |
            make build-all-docker-images

      # -- check and test common package used by multiple tasks in the pipeline --

      - name: "common: Run unit tests"
        run: |
            make in-cicd-docker/run-command \
                RUN_ENVIRONMENT="ci" \
                COMMAND="(cd common; make install-editable test-pytest )"

      - name: "common: Check mypy type hints"
        run: |
            make in-cicd-docker/run-command \
                RUN_ENVIRONMENT="ci" \
                COMMAND="(cd common; make install-editable test-mypy )"

      - name: "common: Check black formatting"
        run: |
            make in-cicd-docker/run-command \
                RUN_ENVIRONMENT="ci" \
                COMMAND="(cd common; make install-editable test-black )"

      # -- test and run pipeline --

      - name: "mnist-digits-demo-pipeline: Check black formatting"
        run: |
            make in-cicd-docker/run-command \
                RUN_ENVIRONMENT="ci" \
                COMMAND="\
                    (cd mnist-demo-pipeline; make test-black)"

      - name: "mnist-digits-demo-pipeline: Check mypy type hints"
        run: |
            make in-cicd-docker/run-command \
                RUN_ENVIRONMENT="ci" \
                COMMAND="\
                    (cd common; make install-editable) && \
                    (cd mnist-demo-pipeline; make test-mypy)"

      - name: "mnist-digits-demo-pipeline: Run pipeline"
        run: |
            # TODO:
            # this should likely be part of in-cicd-docker/run-command setup

            # ---- Ensure that github environment variables are passed into
            # ---- the Docker container when starting the pipeline run
            #
            # First, convert variable list into bash array. Note that there
            # are no newlines in the input variable, and all newlines in the
            # yaml are replaced with spaces.
            #
            # See https://stackoverflow.com/a/21699210
            export ENV_ARR=($ENVS_TO_EXPORT_TO_DOCKER)

            # Second, add "-e" prefix to each array entry, and join all
            # entries into bash string. Result string is
            # "-eGITHUB_REPOSITORY ... -eGITHUB_EVENT_NAME", and this is
            # added as-is when calling docker run.
            #
            # See https://stackoverflow.com/a/30971572
            export EXTRA_FLAGS="${ENV_ARR[@]/#/-e}"

            make in-cicd-docker/run-command \
                EXTRA_FLAGS=" \
                    $EXTRA_FLAGS \
                    --env RUN_ENVIRONMENT \
                " \
                COMMAND="\
                    (cd common; make install-editable) && \
                    (cd mnist-demo-pipeline; make run-pipeline) \
                "

        env:
            ENVS_TO_EXPORT_TO_DOCKER:
              GITHUB_REPOSITORY
              GITHUB_WORKFLOW
              RUNNER_NAME
              GITHUB_RUN_ID
              GITHUB_ACTOR
              GITHUB_JOB
              GITHUB_BASE_REF
              GITHUB_HEAD_REF
              GITHUB_SHA
              GITHUB_REF
              GITHUB_REF_TYPE
              GITHUB_REF_NAME
              GITHUB_EVENT_NAME

      # -- store OpenTelemetry pipeline output log --

      - name: "Store pipeline run OpenTelemetry logs"
        uses: actions/upload-artifact@v2
        with:
          name: pipeline-opentelemetry-spans
          path: |
              ${{ github.workspace }}/pipeline-outputs/opentelemetry-spans.json
          if-no-files-found: error
          retention-days: 20

      - name: "Create custom (Markdown) pipeline summary to show in Github actions page"
        run: |
            # https://github.blog/2022-05-09-supercharging-github-actions-with-job-summaries/
            make in-cicd-docker/run-command \
                COMMAND="(\
                    cd mnist-demo-pipeline; \
                    make create-pipeline-run-summary \
                        OTEL_SPANS_OUTPUTFILE=/pipeline-outputs/opentelemetry-spans.json \
                        OUTPUT_MARKDOWN_FILE=/pipeline-outputs/pipeline_run_summary.md \
                )"

            cat ${{ github.workspace }}/pipeline-outputs/pipeline_run_summary.md > $GITHUB_STEP_SUMMARY

      # --- Expand OpenTelemetry JSON into a directory structure, and store as build artifact --

      - name: "Expand OpenTelemetry JSON log file into a directory structure for easier inspection"
        run: |
            make in-cicd-docker/run-command \
                COMMAND="( \
                    cd mnist-demo-pipeline; \
                    make expand-opentelemetry-spans-into-directory-structure; \
                )"

      # The Github upload-artifact-action uses a separate token (and not GITHUB_TOKEN), see
      # https://github.com/actions/upload-artifact/issues/197
      - name: "Store pipeline output files"
        uses: actions/upload-artifact@v2
        with:
          name: mnist-digits-demo-pipeline---opentelemetry-outputs-v1
          path: |
              ${{ github.workspace }}/pipeline-outputs
              !**/.gitkeep
              !opentelemetry-spans.json
          if-no-files-found: error
          retention-days: 5
