name: "Reusable workflow to run automated tests and the mnist-digit-demo-pipeline"

on:
  workflow_call:

jobs:
  run-tests-pipeline-and-persist-pipeline-outputs:
    name: Build pipeline tests, run pipeline and persist pipeline outputs
    runs-on: ubuntu-20.04

    steps:
      - name: "Determine run-environment"
        shell: bash
        run: |
            echo "RUN_ENVIRONMENT=ci" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          submodules: true
          persist-credentials: false

      - name: "Build docker image"
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
            make docker-build-all

      # -- check and test common package used by multiple tasks in the pipeline --

      - name: "common: Run unit tests"
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
            make docker-run-in-cicd \
                RUN_ENVIRONMENT="ci" \
                COMMAND="(cd common; make install test-pytest )"

      - name: "common: Check mypy type hints"
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
            make docker-run-in-cicd \
                RUN_ENVIRONMENT="ci" \
                COMMAND="(cd common; make install test-mypy )"

      - name: "common: Check black formatting"
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
            make docker-run-in-cicd \
                RUN_ENVIRONMENT="ci" \
                COMMAND="(cd common; make install test-black )"

      # -- test and run pipeline --

      - name: "mnist-digits-demo-pipeline: Check black formatting"
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
            make docker-run-in-cicd \
                RUN_ENVIRONMENT="ci" \
                COMMAND="\
                    (cd mnist-demo-pipeline; make test-black)"

      - name: "mnist-digits-demo-pipeline: Check mypy type hints"
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
            make docker-run-in-cicd \
                RUN_ENVIRONMENT="ci" \
                COMMAND="\
                    (cd common; make install) && \
                    (cd mnist-demo-pipeline; make test-mypy)"

      - name: "mnist-digits-demo-pipeline: Run pipeline"
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
            # ---- Ensure that github environment variables are passed into
            # ---- the Docker container when starting the pipeline run
            #
            # First, convert variable list into bash array. Note that there
            # are no newlines in the input variable, and all newlines in the
            # yaml are replaced with spaces.
            #
            # See https://stackoverflow.com/a/21699210
            export ENV_ARR=($ENVS_TO_EXPORT_TO_DOCKER)

            # Second, add "-e" prefix to each array entry, and join all
            # entries into bash string. Result string is
            # "-eGITHUB_REPOSITORY ... -eGITHUB_EVENT_NAME", and this is
            # added as-is when calling docker run.
            #
            # See https://stackoverflow.com/a/30971572
            export EXTRA_FLAGS="${ENV_ARR[@]/#/-e}"

            make docker-run-in-cicd \
                RUN_ENVIRONMENT="ci" \
                EXTRA_FLAGS="$EXTRA_FLAGS" \
                COMMAND="\
                    (cd common; make install) && \
                    (cd mnist-demo-pipeline; make run)"

        env:
            ENVS_TO_EXPORT_TO_DOCKER:
              GITHUB_REPOSITORY
              GITHUB_WORKFLOW
              RUNNER_NAME
              GITHUB_RUN_ID
              GITHUB_ACTOR
              GITHUB_JOB
              GITHUB_BASE_REF
              GITHUB_HEAD_REF
              GITHUB_SHA
              GITHUB_REF
              GITHUB_REF_TYPE
              GITHUB_REF_NAME
              GITHUB_EVENT_NAME

      - name: "mnist-digits-demo-pipeline: Render Gantt and dependency graphs"
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
            make draw-visuals-from-logged-spans

      # -- store pipeline outputs --

      - name: "Report pipeline summary to to Github actions page"
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
            # https://github.blog/2022-05-09-supercharging-github-actions-with-job-summaries/
            make docker-run-in-cicd \
                COMMAND="(\
                    cd mnist-demo-pipeline; \
                    make add-run-summary \
                        PIPELINE_OUTPUTS_PATH=/pipeline-outputs/ \
                )"

            cat ${{ github.workspace }}/pipeline-outputs/pipeline_run_summary.md > $GITHUB_STEP_SUMMARY

      # Upload action uses a separate token (and not GITHUB_TOKEN), see
      # https://github.com/actions/upload-artifact/issues/197
      - name: "Store pipeline output files"
        uses: actions/upload-artifact@v2
        with:
          name: mnist-digits-demo-pipeline---opentelemetry-outputs-v1
          path: |
              ${{ github.workspace }}/pipeline-outputs
              !**/.gitkeep
          if-no-files-found: error
          retention-days: 20
